## HTTP configuration
quarkus.http.port=8084
# tag::adocCORS[]
quarkus.http.cors=true
# end::adocCORS[]

## Database configuration
quarkus.datasource.jdbc.url=jdbc:h2:mem:default
quarkus.hibernate-orm.database.generation=drop-and-create

quarkus.hibernate-orm.log.sql=true
quarkus.datasource.db-kind = h2
quarkus.hibernate-orm.sql-load-script=import.sql
# drop and create the database at startup (use `update` to only update the schema)



## Logging configuration
quarkus.log.console.enable=true
quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n
quarkus.log.console.level=DEBUG
quarkus.log.console.color=true

## Test configuration
%test.level.multiplier = 1

## Production configuration
%prod.quarkus.hibernate-orm.log.sql=false
%prod.quarkus.log.console.level=INFO


# tag::adocConfigProperty[]
# Business configuration
level.multiplier = 2
# end::adocConfigProperty[]
quarkus.kubernetes-client.trust-certs=true
quarkus.s2i.base-jvm-image=registry.access.redhat.com/openjdk/openjdk-11-rhel7
quarkus.openshift.expose=true
quarkus.openshift.env-vars.my-env-varse.secret=villain-secret
quarkus.openshift.env-vars.my-env-varcm.configmap=villain-config
quarkus.openshift.replicas=3

quarkus.jaeger.service-name=rest-villain
quarkus.jaeger.sampler-type=const
quarkus.jaeger.sampler-param=1
quarkus.log.console.format=%d{HH:mm:ss} %-5p traceId=%X{traceId},spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n
quarkus.openshift.annotations.sidecar.jaegertracing.io/inject=true
quarkus.jaeger.endpoint=http://jaeger-all-in-one-inmemory-collector:14268/api/traces
quarkus.jaeger.metrics.enabled=true
quarkus.jaeger.enabled=true
